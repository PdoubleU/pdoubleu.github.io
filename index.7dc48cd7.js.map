{"mappings":"IAoHAA,oBAnHgBC,EAA4BC,QACjCD,2BAA6BA,OAC7BC,0BAA4BA,OAC5BC,QAGPA,aACSC,eAAc,QACdC,gBAAe,QACfC,eAAYC,EAGrBC,eAAeC,UACJA,EAAaC,WAAU,MAAA,IAAYC,OAAS,EAGvDC,eACI,OAAEC,KAAQT,eAAeO,OAIF,MAArBE,KAAOT,qBACAA,eAAc,QACPU,sBAFhB,QAHSV,eAAc,SACPU,iBAQpBC,aAAaC,GACwDH,KAAzDL,eAAcK,KAAMX,0BAA0Be,YAE5C,MAAND,GAAcH,KAAST,eAAec,SAAQ,YAC7Cd,eAAcS,KAAQT,eAAee,WAAaH,EAAOG,YAGlEC,gBAAgBd,GACW,KAArBO,KAAOT,iBACe,KAAtBS,KAAOR,iBAAeQ,KACfQ,eAEJf,UAAYA,OACZD,gBAAeQ,KAAQT,oBACvBA,eAAc,IAGvBiB,UACI,IAAIC,EACJ,MAAMC,EAAOC,WAAUX,KAAMR,iBAAiBoB,QAAO,IAAA,MAC/CC,EAAUF,WAAUX,KAAMT,gBAAgBqB,QAAO,IAAA,MAEvD,IAAIE,MAAMJ,KAASI,MAAMD,GAAzB,aAEapB,mBAETgB,EAAcC,EAAOG,gBAGrBJ,EAAcC,EAAOG,gBAGrBJ,EAAcC,EAAOG,gBAGrBJ,EAAcC,EAAOG,4BAKpBtB,eAAiBkB,OACjBhB,eAAYC,OACZF,gBAAe,IAGxBuB,iBAAiBZ,GAEb,GAAS,MAANA,EAAc,OAASA,EAE1B,IAAIa,EACJ,MAAMC,EAAed,EAAOG,WAEtBY,EAAa,KAAQC,KAAKF,GAAgBN,WAAWM,EAAaG,MAAK,KAAM,IAAMT,WAAWM,EAAaG,MAAK,KAAM,IAEtHC,EAAa,KAAQF,KAAKF,GAAgBA,EAAaG,MAAK,KAAM,GAAKH,EAAaG,MAAK,KAAM,GAQrG,OALIJ,EADAF,MAAMI,GACQ,GAEGA,EAAcI,eAAc,QAAQ,CAAIC,sBAAuB,IAGhFP,EAAenB,WAAU,MAAA,IAAYC,OAAS,GAAW0B,SAASR,EAAenB,WAAU,MAAA,KAAa4B,cAAc,GAAGb,QAAO,KAAA,KAEhIM,EAAcI,iBAAiBxB,OAASuB,GAAeC,iBAAiBxB,OAAS,GAC1Ea,WAAU,GAAIK,KAAkBK,KAAiBI,cAAc,GAAGnB,WAAWM,QAAO,KAAA,KAG1E,MAAjBS,EAAqB,GACXL,KAAkBK,IAIrBL,EAIff,qBACSZ,0BAA0Be,UAASJ,KAAQe,iBAAgBf,KAAMT,gBAEhD,MAApBS,KAAOP,UAAiBO,KACjBZ,2BAA2BgB,UAAS,GAAAJ,KAAWe,iBAAgBf,KAAMR,oBAAkBQ,KAAOP,iBAE9FL,2BAA2BgB,UAAS,KC7GrD,MAAMsB,EAAgBC,SAASC,iBAAgB,iBACzCC,EAAmBF,SAASC,iBAAgB,oBAC5CE,EAAeH,SAASI,cAAa,iBACrCC,EAAcL,SAASI,cAAa,gBACpCE,EAAiBN,SAASI,cAAa,mBAIvCG,EAAa,IAAI/C,EAHYwC,SAASI,cAAa,2BACvBJ,SAASI,cAAa,2BAIxDL,EAAcS,SAAQC,IAClBA,EAAOC,iBAAgB,SAAQ,KAC7BH,EAAWhC,aAAakC,EAAOhC,WAC/B8B,EAAWjC,sBAIjB4B,EAAiBM,SAAQC,IACrBA,EAAOC,iBAAgB,SAAQ,KAC7BH,EAAW3B,gBAAgB6B,EAAOhC,WAClC8B,EAAWjC,sBAIjB6B,EAAaO,iBAAgB,SAAQ,KACjCH,EAAW1B,UACX0B,EAAWjC,mBAGf+B,EAAYK,iBAAgB,SAAQ,KAChCH,EAAW5C,QACX4C,EAAWjC,mBAGfgC,EAAeI,iBAAgB,SAAQ,IAAQH,EAAWnC","sources":["src/Calculator.js","src/main.js"],"sourcesContent":["class Calculator {\n    constructor(previousOperandTextElement, currentOperandTextElement) {\n      this.previousOperandTextElement = previousOperandTextElement\n      this.currentOperandTextElement = currentOperandTextElement\n      this.clear()\n    }\n\n    clear() {\n        this.currentOperand = ''\n        this.previousOperand = ''\n        this.operation = undefined\n    }\n\n    isInputTooLong(currentInput) {\n        return currentInput.replaceAll(/\\s/g, '').length > 7 ? true : false\n    }\n\n    appendSymbol(){\n        if (!this.currentOperand.length) {\n            this.currentOperand = '-'\n            return this.updateDisplay()\n        }\n        if (this.currentOperand === '-') {\n            this.currentOperand = ''\n            return this.updateDisplay()\n        }\n    }\n\n    appendNumber(number) {\n        if(this.isInputTooLong(this.currentOperandTextElement.innerText)) return\n\n        if (number === ',' && this.currentOperand.includes(',')) return\n        this.currentOperand = this.currentOperand.toString() + number.toString()\n    }\n\n    chooseOperation(operation) {\n        if (this.currentOperand === '') return\n        if (this.previousOperand !== '') {\n            this.compute()\n        }\n        this.operation = operation\n        this.previousOperand = this.currentOperand\n        this.currentOperand = ''\n    }\n\n    compute() {\n        let computation\n        const prev = parseFloat(this.previousOperand?.replace(/,/, '.'))\n        const current = parseFloat(this.currentOperand?.replace(/,/, '.'))\n\n        if (isNaN(prev) || isNaN(current)) return\n\n        switch (this.operation) {\n        case '+':\n            computation = prev + current\n            break\n        case '-':\n            computation = prev - current\n            break\n        case 'x':\n            computation = prev * current\n            break\n        case '/':\n            computation = prev / current\n            break\n        default:\n            return\n        }\n        this.currentOperand = computation\n        this.operation = undefined\n        this.previousOperand = ''\n    }\n\n    getDisplayNumber(number) {\n\n        if(number === '-') return number\n\n        let integerDisplay\n        const stringNumber = number.toString()\n\n        const integerDigits = /\\./.test(stringNumber) ? parseFloat(stringNumber.split('.')[0]) : parseFloat(stringNumber.split(',')[0])\n\n        const decimalDigits = /\\./.test(stringNumber) ? stringNumber.split('.')[1] : stringNumber.split(',')[1]\n\n        if (isNaN(integerDigits)) {\n            integerDisplay = ''\n        } else {\n            integerDisplay = integerDigits.toLocaleString('pl-PL', { maximumFractionDigits: 0 })\n        }\n\n        if (integerDisplay.replaceAll(/\\s/g, '').length > 10) return parseInt(integerDisplay.replaceAll(/\\s/g, '')).toExponential(4).replace(/\\./, ',');\n\n        if (integerDigits.toLocaleString().length + decimalDigits?.toLocaleString().length > 10) {\n            return parseFloat(`${integerDisplay}.${decimalDigits}`).toExponential(4).toString().replace(/\\./, ',');\n        }\n\n        if (decimalDigits != null) {\n            return `${integerDisplay},${decimalDigits}`\n        }\n\n        else {\n            return integerDisplay\n        }\n    }\n\n    updateDisplay() {\n        this.currentOperandTextElement.innerText = this.getDisplayNumber(this.currentOperand)\n\n        if (this.operation != null) {\n            this.previousOperandTextElement.innerText = `${this.getDisplayNumber(this.previousOperand)} ${this.operation}`\n        } else {\n            this.previousOperandTextElement.innerText = ''\n        }\n    }\n}\n\nexport default Calculator;","import Calculator from \"./Calculator.js\"\n\nconst numberButtons = document.querySelectorAll('[data-number]')\nconst operationButtons = document.querySelectorAll('[data-operation]')\nconst equalsButton = document.querySelector('[data-equals]')\nconst clearButton = document.querySelector('[data-clear]')\nconst negativeButton = document.querySelector('[data-negative]')\nconst previousOperandTextElement = document.querySelector('[data-previous-operand]')\nconst currentOperandTextElement = document.querySelector('[data-current-operand]')\n\nconst calculator = new Calculator(previousOperandTextElement, currentOperandTextElement)\n\nnumberButtons.forEach(button => {\n    button.addEventListener('click', () => {\n      calculator.appendNumber(button.innerText)\n      calculator.updateDisplay()\n    })\n})\n\noperationButtons.forEach(button => {\n    button.addEventListener('click', () => {\n      calculator.chooseOperation(button.innerText)\n      calculator.updateDisplay()\n    })\n})\n\nequalsButton.addEventListener('click', () => {\n    calculator.compute()\n    calculator.updateDisplay()\n})\n\nclearButton.addEventListener('click', () => {\n    calculator.clear()\n    calculator.updateDisplay()\n  })\n\nnegativeButton.addEventListener('click', () => calculator.appendSymbol())"],"names":["$46027fc7b8fb2c19$export$9099ad97b570f7c","previousOperandTextElement","currentOperandTextElement","clear","currentOperand","previousOperand","operation","undefined","isInputTooLong","currentInput","replaceAll","length","appendSymbol","this","updateDisplay","appendNumber","number","innerText","includes","toString","chooseOperation","compute","computation","prev","parseFloat","replace","current","isNaN","getDisplayNumber","integerDisplay","stringNumber","integerDigits","test","split","decimalDigits","toLocaleString","maximumFractionDigits","parseInt","toExponential","$379cc73f66e6620c$var$numberButtons","document","querySelectorAll","$379cc73f66e6620c$var$operationButtons","$379cc73f66e6620c$var$equalsButton","querySelector","$379cc73f66e6620c$var$clearButton","$379cc73f66e6620c$var$negativeButton","$379cc73f66e6620c$var$calculator","forEach","button","addEventListener"],"version":3,"file":"index.7dc48cd7.js.map"}